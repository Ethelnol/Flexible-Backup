#!/bin/bash

declare -i true=0
declare -i false=1

declare outputDir="/home/$USER/special-backup"
declare -a backupSources=("boot" "etc" "home" "root" "srv" "usr" "var")
declare -a noBackupSources=("var/cache" "var/run" "var/tmp" "home/lost+found" "home/ethelnol/.cache" "${outputDir:1}")
#declare -a noBackupSources=("cache" "run" "tmp" "lost+found" ".cache" "$(basename "$outputDir")")
declare exclude=""
for j in "${noBackupSources[@]}"; do exclude+="--exclude=\"/$j\" "; done

main(){
	cd /
	archiveType="tar.gz"

	for i in "${backupSources[@]}"; do
		Scan "0" "$i"
		cd /
	done
}

Scan(){
	local tabCount=$1; shift
	local i="$*"

	EchoTabs "$tabCount"; echo -n "Scanning: "
	if [[ "$PWD" == "/" ]]; then
		echo "\"$PWD$i\""
		i="$PWD$i"
	else
		echo "\"$PWD/$i\""
		i="$PWD/$i"
	fi

	if (( $(sudo du -sb "$i" | awk '{print $1}') > $((5 * (2**30) -1)) )); then

		#Check if file or directory
		if [[ -f "$i" ]]; then
			Backup "$i"
			return
		fi

		if [[ "$i" == "/root" ]]; then
			Backup "$i"
		fi

		#Must be a directory
		#Step into
		cd "$i" || exit

		IFS=$'\n'
		set -o noglob
		# shellcheck disable=SC2207
		local curdirSubdirs=($(sudo ls -a))


		for j in "${curdirSubdirs[@]}"; do
			if [[ "$j" == "." ]] || [[ "$j" == ".." ]]; then continue; fi
			
			Scan $((tabCount+1)) "$j"
			cd "$i" || exit

		done
	else
		Backup "$tabCount" "$i"
	fi
}

Backup(){
	local tabCount=$1; shift
	local i="$*"

	if WriteOrNot "$i"; then

		for k in "${noBackupSources[@]}"; do
			if [[ "$i" == "/$k" ]]; then
				EchoTabs "$tabCount"; echo "Exception found.  Skipping: \"$i\""
				return
			fi
		done

		local exclude=""
		# shellcheck disable=SC2155
		local dirName="$(dirname "$i")"
		
		EchoTabs "$tabCount"; echo "Backing up: \"$i\""

		if [[ -f "$outputDir$i.$archiveType" ]]; then
			echo "WARNING: RM ENVOKED [ph]"
			sudo rm "$outputDir$i.$archiveType"
		fi

		if [[ "$dirName" != "/" ]]; then
			mkdir -p "$outputDir$dirName" 2> /dev/null
		fi

		# shellcheck disable=SC2155
		local SIZE="$(sudo du -sb "$i" | awk '{print $1}')"

	#	echo -e "tar $exclude-cf - $i -P | xz -z -9e -T0 > $outputDir$i.tar.xz"
		sudo tar \
		--exclude="/var/cache" --exclude="/var/run" --exclude="/var/tmp" --exclude="/home/lost+found" --exclude="/home/ethelnol/.cache" --exclude="/home/ethelnol/special-backup" \
		-cf - "$i" -P |\
		pv -brtpe -s "$SIZE" |\
		sudo gzip -v --best -c > "$outputDir$i.$archiveType"
	#	EchoTabs "$tabCount"; echo "Backup complete: $j [ph]"
		EchoTabs "$tabCount"; echo "Backed complete"
	else
		EchoTabs "$tabCount"; echo "Backup unnecessary, Skipping: \"$i\""
	fi
}

WriteOrNot(){
	local checkSource="$*"

	if [[ ! -f "$checkSource$archiveType" ]]; then return $true; fi

	local fileTime; fileTime="$(date -r "$checkSource" "+%Y%m%d%H%M%S")"
	local archiveTime; archiveTime="$(date -r "$outputDir$checkSource.$archiveType" "+%Y%m%d%H%M%S")"

	if (( fileTime > archiveTime )); then
		return $true
	else
		return $false
	fi
}

CheckSudo(){
	if [[ "$(whoami)" != "root" ]]; then
		echo "Not run as root, checking sudo privileges"
		if [[ "$(sudo whoami)" != "root" ]]; then
			echo "Error: requires sudo privileges"
			return $false
		else
			echo -e "Privileges verified\n"
			return $true
		fi
	fi
	return $true
}

EchoTabs(){
	local num=$1
	for ((p=0; p<num; p++)); do
		echo -ne "\t"
	done
}

CheckSudo; main; exit