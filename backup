#!/bin/bash

declare -i true=0
declare -i false=1

declare archiveType="tar.gz"
declare outputDir="/home/$USER/special-backup"
declare backupRoot="/"
#whitelist and blacklist are assumed to be inside $backupDirRoot
declare -a dirWhitelist=("boot" "etc" "home" "root" "srv" "usr" "var")
declare -a dirBlacklist=("home/lost+found" "home/$USER/.cache" "home/$USER/.local/share/Trash" "media" "mnt" "var/cache" "var/run" "var/tmp" "${outputDir:1}")

main(){
	local i

	cd "$backupRoot" || exit

	for i in "${dirWhitelist[@]}"; do
		Scan 0 "$i"
		cd "$backupRoot" || exit
	done

	echo "Backup complete"	

	sudo chown -R "$USER:$USER" "$outputDir"
}

#returns true if (backs up input) or (any subdir is backed up)
#returns false if (input is blacklisted) or (no backups made in subdir)
Scan(){
	local tabCount=$1; shift
	local i="$*"
	local j
	local returnBool=$false

	if [[ "$PWD" == "/" ]]
	then i="/$i"
	else i="$PWD/$i"
	fi

	EchoTabs "$tabCount"; echo "Scanning: \"$i\""

	#if (blacklisted)
	for j in "${dirBlacklist[@]}"; do
		#${i:1:SizeOf$j} == $j
		if [[ "${i:1:${#j}}" == "$j" ]]; then
			EchoTabs "$tabCount"; echo -e "Exception found.  Skipping: \"$i\"\n"
			return $false
		fi
	done

	#if (equal or larger than 5g)
	if (( $(sudo du -sb "$i" | awk '{print $1}') > $((5 * (2**30) - 1)) )); then

		#Check if file or directory
		if [[ -f "$i" ]]; then
			Backup "$tabCount" "$i"
			return $true
		fi

		DeeperScan "$tabCount" "$i"

		return $?
	fi

	#if (has blacklisted subdir)
	for j in "${dirBlacklist[@]}"; do
		#/${j:0:SizeOf$i} == $i
		if [[ "/${j:0:$(( ${#i} - 1 ))}" == "$i" ]]; then
			DeeperScan "$tabCount" "$i"

			return $?
		fi
	done

	Backup "$tabCount" "$i"

	return $true
}

#returns true if (any subdir is backed up)
#returns false if (no subdir is backed up)
DeeperScan(){
	local tabCount="$1"; shift
	local i="$*"
	local j
	local returnBool=$false

	cd "$i" || exit

	IFS=$'\n'
	set -o noglob
	# shellcheck disable=SC2207
	local curdirSubdirs=($(sudo ls -a))

	for j in "${curdirSubdirs[@]}"; do
		if [[ "$j" == "." ]] || [[ "$j" == ".." ]]; then continue; fi
		
		Scan $((tabCount+1)) "$j"
		if [[ "$?" == "$true" ]]; then returnBool=$true; fi

		cd "$i" || exit
	done

	return $returnBool
}

#returns true if (backup runs successfully)
#returns false if (backup wasn't run)
Backup(){
	local tabCount=$1; shift
	local i="$*"

	#if destination archive (doesn't exist) or (is older than the source)
	if WriteOrNot "$i"; then
		local j

		##if (blacklisted) [should not happen]
		#for j in "${dirBlacklist[@]}"; do
		#	if [[ "$i" == "/$j" ]]; then 
		#		echo -e "ERROR: EXCEPTION SLIPPED THROUGH [ph]\n"
		#		exit
		#	fi
		#done
		
		EchoTabs "$tabCount"; echo "Backing up: \"$i\""

		#if (archive exists)
		if [[ -f "$outputDir$i.$archiveType" ]]; then
			#echo "WARNING: RM ENVOKED [ph]"
			sudo rm "$outputDir$i.$archiveType"
		fi
		
		#if ($i isn't in backupRoot)
		if [[ "$(dirname "$i")" != "$backupRoot" ]]; then
			sudo mkdir -p "$outputDir$(dirname "$i")" 2> /dev/null
		fi

		Compress "$i"

		EchoTabs "$tabCount"; echo -e "Backed up: \"$i\"\n"
		return $true
	fi

	EchoTabs "$tabCount"; echo -e "Backup unnecessary.  Skipping: \"$i\"\n"
	return $false
}

Compress(){
	local i="$*"
	sudo tar --create --file - "$i" --absolute-names --directory="$(basename "$i") ." |\
	pv --bytes --rate --timer --progress --eta --size "$(\
		sudo du -sb "$i" | awk '{print $1}'\
	)" |\
	sudo gzip --keep --quiet --best --stdout |\
	sudo tee "$outputDir$i.$archiveType" > /dev/null
}

WriteOrNot(){
	local checkSource="$*"

	if [[ ! -f "$outputDir$checkSource.$archiveType" ]]; then
		return $true
	fi

	local -i fileTime; fileTime="$(date -r "$checkSource" "+%Y%m%d%H%M%S")"
	local -i archiveTime; archiveTime="$(date -r "$outputDir$checkSource.$archiveType" "+%Y%m%d%H%M%S")"

	if (( fileTime > archiveTime )); then
		return $true
	else
		return $false
	fi
}

CheckSudo(){
	if [[ "$(whoami)" != "root" ]]; then
		if [[ "$(sudo whoami)" != "root" ]]
		then echo -e "Error: requires sudo privileges\n"; return $false
		else echo -e "Privileges verified\n"; return $true
		fi
	fi

	return $true
}

EchoTabs(){
	local num=$1
	local i
	for ((i=0; i<num; i++)); do
		echo -ne "\t"
	done
}

CheckSudo && main; exit $?